<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BC.DDD</name>
    </assembly>
    <members>
        <member name="T:BC.DDD.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:BC.DDD.Logging.ILog.Log(BC.DDD.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:BC.DDD.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:BC.DDD.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:BC.DDD.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:BC.DDD.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:BC.DDD.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:BC.DDD.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:BC.DDD.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:BC.DDD.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:BC.DDD.Logging.LogProvider.SetCurrentLogProvider(BC.DDD.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:BC.DDD.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:BC.DDD.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:BC.DDD.Logging.LogProvider.SetCurrentLogProvider(BC.DDD.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:BC.DDD.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:BC.DDD.Logging.ILog"/></returns>
        </member>
        <member name="M:BC.DDD.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:BC.DDD.Logging.ILog"/></returns>
        </member>
        <member name="M:BC.DDD.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:BC.DDD.Logging.ILog"/></returns>
        </member>
        <member name="M:BC.DDD.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:BC.DDD.Logging.ILog"/></returns>
        </member>
        <member name="M:BC.DDD.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:BC.DDD.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:BC.DDD.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:BC.DDD.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Logging.DefaultLogWrite.Instance">
            <summary>
            日志写入器实例
            </summary>
        </member>
        <member name="M:BC.DDD.Logging.DefaultLogWrite.Write(BC.DDD.Logging.ILogEntity)">
            <summary>
            写入日志
            </summary>
            <param name="LogInfo">日志信息</param>
            <remarks></remarks>
        </member>
        <member name="M:BC.DDD.Logging.DefaultLogWrite.Log(BC.DDD.Logging.LogRanks,System.String)">
            <summary>
            写入简单日志
            </summary>
            <param name="Rank">级别</param>
            <param name="Message">信息</param>
        </member>
        <member name="M:BC.DDD.Logging.DefaultLogWrite.Log(BC.DDD.Logging.LogRanks,System.String,System.Exception)">
            <summary>
            写入错误日志
            </summary>
            <param name="Rank">级别</param>
            <param name="Message">信息</param>
            <param name="ex">错误信息</param>
        </member>
        <member name="M:BC.DDD.Logging.DefaultLogWrite.Log(BC.DDD.Logging.LogRanks,System.Exception)">
            <summary>
            写入错误日志
            </summary>
            <param name="Rank">级别</param>
            <param name="ex">错误信息</param>
        </member>
        <member name="M:BC.DDD.Logging.DefaultLogWrite.Log(BC.DDD.Logging.LogRanks,System.String,System.String)">
            <summary>
            写入一个与某个用户有关的日志
            </summary>
            <param name="Rank">级别</param>
            <param name="Message">信息</param>
            <param name="UserName">用户</param>
        </member>
        <member name="M:BC.DDD.Logging.DefaultLogWrite.GetExceptionMessage(System.Exception)">
            <summary>
            取得异常中的所有错误信息
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Logging.ExceptionInterceptor.Invoke(Microsoft.Practices.Unity.InterceptionExtension.IMethodInvocation,Microsoft.Practices.Unity.InterceptionExtension.GetNextInterceptionBehaviorDelegate)">
            <summary>
            拦截处理
            </summary>
            <param name="input"></param>
            <param name="getNext"></param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Logging.ExceptionManager.Instance">
            <summary>
            异常管理器
            </summary>
        </member>
        <member name="M:BC.DDD.Logging.ExceptionManager.HandleException(System.Exception)">
            <summary>
            处理异常
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Logging.ExceptionManager.HandleException``1(``0)">
            <summary>
            处理异常
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Logging.ExceptionManager.GetMessage(System.Exception)">
            <summary>
            取得异常中的所有错误信息
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Logging.ExceptionManager.GetExpandData(System.Exception)">
            <summary>
            取得扩展数据
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Logging.ILogEntity.CreateDate">
            <summary>
            记录时间
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.ILogEntity.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.ILogEntity.ExpandData">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.ILogEntity.UserName">
            <summary>
            相关用户
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.ILogEntity.Origin">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.ILogEntity.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.ILogEntity.LogRank">
            <summary>
            级别
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.ILogEntity.LogRankEnum">
            <summary>
            级别（枚举）
            </summary>
        </member>
        <member name="T:BC.DDD.Logging.LogRanks">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.BaseLogInfo.CreateDate">
            <summary>
            记录日期
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.BaseLogInfo.Content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.BaseLogInfo.ExpandData">
            <summary>
            扩展数据
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.BaseLogInfo.UserName">
            <summary>
            相关用户
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.BaseLogInfo.Origin">
            <summary>
            来源
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.BaseLogInfo.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.BaseLogInfo.LogRank">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.BaseLogInfo.LogRankEnum">
            <summary>
            日志级别（枚举）
            </summary>
        </member>
        <member name="T:BC.DDD.Logging.ILogWrite">
            <summary>
            日志写入接口
            </summary>
        </member>
        <member name="M:BC.DDD.Logging.ILogWrite.Write(BC.DDD.Logging.ILogEntity)">
            <summary>
            写入日志
            </summary>
            <param name="LogInfo">日志信息</param>
            <remarks></remarks>
        </member>
        <member name="M:BC.DDD.Logging.ILogWrite.Log(BC.DDD.Logging.LogRanks,System.String)">
            <summary>
            写入简单日志
            </summary>
            <param name="Rank">级别</param>
            <param name="Message">信息</param>
        </member>
        <member name="M:BC.DDD.Logging.ILogWrite.Log(BC.DDD.Logging.LogRanks,System.String,System.Exception)">
            <summary>
            写入错误日志
            </summary>
            <param name="Rank">级别</param>
            <param name="Message">信息</param>
            <param name="ex">错误信息</param>
        </member>
        <member name="M:BC.DDD.Logging.ILogWrite.Log(BC.DDD.Logging.LogRanks,System.Exception)">
            <summary>
            写入错误日志
            </summary>
            <param name="Rank">级别</param>
            <param name="ex">错误信息</param>
        </member>
        <member name="M:BC.DDD.Logging.ILogWrite.Log(BC.DDD.Logging.LogRanks,System.String,System.String)">
            <summary>
            写入一个与某个用户有关的日志
            </summary>
            <param name="Rank">级别</param>
            <param name="Message">信息</param>
            <param name="UserName">用户</param>
        </member>
        <member name="P:BC.DDD.Logging.LogManager.Instance">
            <summary>
            日志写入器实例
            </summary>
        </member>
        <member name="P:BC.DDD.Logging.LogManager.Current">
            <summary>
            日志写入
            </summary>
        </member>
        <member name="M:BC.DDD.Logging.LogManager.Log(System.String,BC.DDD.Logging.LogRanks,System.String)">
            <summary>
            写入简单日志
            </summary>
            <param name="Message"></param>
            <param name="LogRank"></param>
            <param name="UserName"></param>
        </member>
        <member name="M:BC.DDD.Logging.LogManager.Log(System.String,System.Exception,BC.DDD.Logging.LogRanks,System.String)">
            <summary>
            写入错误日志
            </summary>
            <param name="Message"></param>
            <param name="ex"></param>
            <param name="LogRank"></param>
            <param name="UserName"></param>
        </member>
        <member name="M:BC.DDD.Logging.LogManager.Write(BC.DDD.Logging.ILogEntity)">
            <summary>
            写入日志
            </summary>
            <param name="LogInfo"></param>
        </member>
        <member name="M:BC.DDD.Logging.LogManager.Write(System.String,System.String,System.String,BC.DDD.Logging.LogRanks)">
            <summary>
            写入不分类日志
            </summary>
            <param name="Content">日志内容</param>
            <param name="UserName">相关用户</param>
            <param name="Origin">来源</param>
            <param name="LogRanks">日志级别，可选，默认为“信息=1”</param>
        </member>
        <member name="M:BC.DDD.Logging.LogManager.Write(System.String,System.String,System.String,BC.DDD.Logging.LogRanks,System.String)">
            <summary>
            写入日志（不分类）
            </summary>
            <param name="Content">日志内容</param>
            <param name="UserName">相关用户</param>
            <param name="Origin">来源</param>
            <param name="LogRank">日志级别</param>
            <param name="ExpandData">扩展数据，可选，默认为空</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Logging.LogManager.Write(System.String,System.String,System.String,BC.DDD.Logging.LogRanks,System.String,System.Byte)">
            <summary>
            写入日志
            </summary>
            <param name="Content">日志内容</param>
            <param name="UserName">相关用户</param>
            <param name="Origin">来源</param>
            <param name="LogRank">日志级别</param>
            <param name="LogType">日志类型，可选，默认为“不分类=0”</param>
            <param name="ExpandData">扩展数据，可选，默认为空</param>
        </member>
        <member name="T:BC.DDD.Domain.Authorization.BaseClaim`1">
            <summary>
            声明基类
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.BaseClaim`1.ClaimType">
            <summary>
            声明类型
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.BaseClaim`1.ClaimValue">
            <summary>
            声明值
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.Authorization.BaseClaim`1.ToClaim">
            <summary>
            转换为Claim
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Domain.Authorization.BaseClaim`1.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.BaseClaimWithGuid.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.Authorization.BaseUser`1">
            <summary>
            用户基类
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.BaseUser`1.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.BaseUser`1.TenantId">
            <summary>
            租户Id（可选）
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.BaseUserWithGuid.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.Authorization.IClaim">
            <summary>
            声明
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.IClaim.ClaimType">
            <summary>
            声明类型
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.IClaim.ClaimValue">
            <summary>
            生命值
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.Authorization.IUser`1">
            <summary>
            用户接口
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.IUser`1.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Authorization.IUser`1.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.CustomModelBinder`1.#ctor(`0)">
            <summary>
            构建对象
            </summary>
            <param name="InputEntity"></param>
        </member>
        <member name="P:BC.DDD.Domain.CustomModelBinder`1.Value">
            <summary>
            对象值
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.CustomModelBinder`1.State">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.CustomModelBinder`1.ValidationResults">
            <summary>
            验证返回信息集合
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.CustomModelBinderHelper.GetSummaryErrorMessager``1(BC.DDD.Domain.CustomModelBinder{``0})">
            <summary>
            取得错误信息摘要
            </summary>
            <param name="InputCustomModelBinder">模型验证结果</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Domain.CustomModelBinderHelper.GetValidatorReturnInfo``1(BC.DDD.Domain.CustomModelBinder{``0})">
            <summary>
            取得验证结果的ReturnInfo格式数据
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="InputCustomModelBinder"></param>
            <returns></returns>
        </member>
        <member name="F:BC.DDD.Domain.BCDataFilters.SoftDelete">
            <summary>
            软删除过滤器
            </summary>
        </member>
        <member name="F:BC.DDD.Domain.BCDataFilters.MustMultiTenant">
            <summary>
            多租户过滤器
            对实现IMustMultiTenant的对象过滤
            </summary>
        </member>
        <member name="F:BC.DDD.Domain.BCDataFilters.MayMultiTenant">
            <summary>
            多租户过滤器
            对实现IMayMultiTenant的对象过滤
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.DataTable.DataTablePaging`1">
            <summary>
            DataTable分页对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BC.DDD.Domain.DataTable.DataTablePaging`1.recordsFiltered">
            <summary>
            过滤后的总记录数
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.DataTable.DataTablePaging`1.draw">
            <summary>
            绘图记录数
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.DataTable.DataTablePaging`1.recordsTotal">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.DataTable.DataTablePaging`1.data">
            <summary>
            分页数据
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.DataTable.DataTablePaging`1.error">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.DataTable.DataTablePagingParameter">
            <summary>
            传入的参数
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.DataTable.DataTablePagingParameter.draw">
            <summary>
            绘图记录数
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.DataTable.DataTablePagingParameter.length">
            <summary>
            取几条数据
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.DataTable.DataTablePagingParameter.start">
            <summary>
            从第几条开始取数据
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.DataTable.DataTablePagingParameter.Paging(System.Int32)">
            <summary>
            获取分页信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeExtensions">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeExtensions.GetSetting(BC.DDD.Domain.ExtendedAttributes.IExtendedAttributeSetting)">
            <summary>
            获取扩展属性设置的扩展方法
            </summary>
            <param name="SettingDomain">扩展属性设置对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeExtensions.GetData(BC.DDD.Domain.ExtendedAttributes.IExtendedAttributeData)">
            <summary>
            获取扩展属性数据的扩展方法
            </summary>
            <param name="DataDomain">扩展属性数据对象</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.IExtendedAttributeData.ExtendedAttributeData">
            <summary>
            扩展属性数据
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.ExtendedAttributes.IExtendedAttributeSetting">
            <summary>
            扩展属性设置
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.IExtendedAttributeSetting.ExtendedAttributeSetting">
            <summary>
            扩展属性设置
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeConst">
            <summary>
            扩展属性常量
            </summary>
        </member>
        <member name="F:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeConst.ExtendedAttributeType_Radio">
            <summary>
            单选
            </summary>
        </member>
        <member name="F:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeConst.ExtendedAttributeType_Check">
            <summary>
            复选
            </summary>
        </member>
        <member name="F:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeConst.ExtendedAttributeType_SingleText">
            <summary>
            单行文本
            </summary>
        </member>
        <member name="F:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeConst.ExtendedAttributeType_MultiText">
            <summary>
            多行文本
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeDataValue">
            <summary>
            扩展属性数据
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeDataValue.Items">
            <summary>
            扩展属性数据列表
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeDataItemValue">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeDataItemValue.Name">
            <summary>
            扩展属性名称
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeDataItemValue.Key">
            <summary>
            扩展属性键值
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeDataItemValue.Value">
            <summary>
            扩展属性值
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingValue">
            <summary>
            扩展属性设置
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingValue.ExtendedAttributeItems">
            <summary>
            所属表单项列表
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingValue.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            数据验证
            </summary>
            <param name="validationContext"></param>
            <returns></returns>
        </member>
        <member name="T:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue">
            <summary>
            某一项扩展属性设置
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.Type">
            <summary>
            类型
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.DefaultValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.OrderBy">
            <summary>
            排序
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.ReceiveAttachment">
            <summary>
            接受附件信息
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.MaxLength">
            <summary>
            最长长度
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.Must">
            <summary>
            必填项
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.AllowExtension">
            <summary>
            扩展验证
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.Extension">
            <summary>
            格式验证
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ExtendedAttributes.ExtendedAttributeSettingItemValue.ExtensionErrorMessage">
            <summary>
            出错时显示的信息
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.ISoftDelete">
            <summary>
            实现此接口代表此对象支持软删除
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.ISoftDelete.IsDelete">
            <summary>
            此对象已被标记为删除
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Values.Dependent.DependentId">
            <summary>
            依赖Id
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Values.Dependent.DependentType">
            <summary>
            依赖类型
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.Values.Dependent.DependentName">
            <summary>
            依赖名称
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.Values.Dependent.ToString">
            <summary>
            拼接字符串
            </summary>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Domain.BaseEntity`1.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.BaseEntity`1.Added(BC.DDD.Domain.IEntity{`0})">
            <summary>
            对象新增时
            </summary>
            <param name="EntityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Domain.BaseEntity`1.Deleted(BC.DDD.Domain.IEntity{`0})">
            <summary>
            对象移除时
            </summary>
            <param name="EntityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Domain.BaseEntity`1.Modified(BC.DDD.Domain.IEntity{`0})">
            <summary>
            对象修改时
            </summary>
            <param name="EntityInfo"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Domain.BaseEntity`1.Publish``1(``0)">
            <summary>
            发布事件
            </summary>
            <typeparam name="TEvent">事件类型</typeparam>
            <param name="EventInfo">事件对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Domain.BaseEntity`1.SetId(`0)">
            <summary>
            设置Id
            </summary>
            <param name="Id"></param>
        </member>
        <member name="P:BC.DDD.Domain.EntityWithGuid.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="M:BC.DDD.Domain.EntityWithKey.#ctor(System.String)">
            <summary>
            初始化Id
            </summary>
            <param name="Key"></param>
        </member>
        <member name="M:BC.DDD.Domain.EntityWithKey.#ctor">
            <summary>
            创建空的对象
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.EntityWithKey.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.EntityWithPKId.GId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.EntityWithPKId.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BC.DDD.Domain.EntityWithString.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:BC.DDD.Domain.IEntity`1">
            <summary>
            领域实体接口
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:BC.DDD.Domain.IEntity`1.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="T:BC.DDD.Import.BaseImportData">
            <summary>
            被导入数据对象的基类
            </summary>
        </member>
        <member name="P:BC.DDD.Import.BaseImportData.Type">
            <summary>
            此对象的类型
            </summary>
        </member>
        <member name="P:BC.DDD.Import.BaseImportData.ModelErrors">
            <summary>
            模型中的错误列表
            </summary>
        </member>
        <member name="M:BC.DDD.Import.BaseImportData.AddModelError(System.String,System.String)">
            <summary>
            增加模型错误信息
            </summary>
            <param name="FieldName"></param>
            <param name="Message"></param>
        </member>
        <member name="M:BC.DDD.Import.BaseImportData.IsValid">
            <summary>
            是否验证通过
            </summary>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Import.BaseImportData.CSVTemplate">
            <summary>
            CSV模板
            </summary>
        </member>
        <member name="P:BC.DDD.Import.IImportData.Type">
            <summary>
            此对象的类型
            </summary>
        </member>
        <member name="P:BC.DDD.Import.IImportData.ModelErrors">
            <summary>
            错误信息列表
            </summary>
        </member>
        <member name="M:BC.DDD.Import.IImportData.AddModelError(System.String,System.String)">
            <summary>
            增加模型错误信息
            </summary>
            <param name="FieldName"></param>
            <param name="Message"></param>
        </member>
        <member name="M:BC.DDD.Import.IImportData.IsValid">
            <summary>
            是否验证通过
            </summary>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Import.IImportData.CSVTemplate">
            <summary>
            CSV文件模板
            </summary>
        </member>
        <member name="T:BC.DDD.Import.ImportBatchReturnInfo">
            <summary>
            批量导入结果
            </summary>
        </member>
        <member name="M:BC.DDD.Import.ImportBatchReturnInfo.Error(System.String)">
            <summary>
            错误信息
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Import.ImportBatchReturnInfo.Error(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            错误信息
            </summary>
            <param name="Errors">错误信息列表</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Import.ImportBatchReturnInfo.Current">
            <summary>
            当前批次
            </summary>
        </member>
        <member name="P:BC.DDD.Import.ImportBatchReturnInfo.Total">
            <summary>
            全部批次
            </summary>
        </member>
        <member name="T:BC.DDD.Import.ImportReturnInfo">
            <summary>
            导入结果
            </summary>
        </member>
        <member name="M:BC.DDD.Import.ImportReturnInfo.Success(System.String)">
            <summary>
            成功信息
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Import.ImportReturnInfo.Error(System.String)">
            <summary>
            错误信息
            </summary>
            <param name="Message"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Import.ImportReturnInfo.Error(System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            错误信息
            </summary>
            <param name="Errors">错误信息列表</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Import.ImportReturnInfo.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="P:BC.DDD.Import.ImportReturnInfo.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:BC.DDD.Import.ImportReturnInfo.Message">
            <summary>
            信息
            </summary>
        </member>
        <member name="P:BC.DDD.Import.ImportReturnInfo.Errors">
            <summary>
            错误信息列表
            </summary>
        </member>
        <member name="T:BC.DDD.MultiTenancy.IMayMultiTenant">
            <summary>
            实现此接口则此对象可能支持多租户
            </summary>
        </member>
        <member name="P:BC.DDD.MultiTenancy.IMayMultiTenant.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="T:BC.DDD.MultiTenancy.IMustMultiTenant">
            <summary>
            实现此接口要求对象必须支持多租户
            </summary>
        </member>
        <member name="P:BC.DDD.MultiTenancy.IMustMultiTenant.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="T:BC.DDD.MultiTenancy.ITenant">
            <summary>
            租户信息接口
            </summary>
        </member>
        <member name="P:BC.DDD.MultiTenancy.ITenant.Id">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="P:BC.DDD.MultiTenancy.ITenant.Name">
            <summary>
            租户名称
            </summary>
        </member>
        <member name="T:BC.DDD.MultiTenancy.NullTenancyRepository">
            <summary>
            租户Repository的默认实现，永远返回null
            </summary>
        </member>
        <member name="M:BC.DDD.MultiTenancy.NullTenancyRepository.Single(System.String)">
            <summary>
            通过Id查找租户
            </summary>
            <param name="Id">Id</param>
            <returns>永远返回null</returns>
        </member>
        <member name="M:BC.DDD.MultiTenancy.NullTenancyRepository.SingleByName(System.String)">
            <summary>
            通过名称查找租户
            </summary>
            <param name="Name"></param>
            <returns>永远返回null</returns>
        </member>
        <member name="T:BC.DDD.MultiTenancy.ITenancyRepository">
            <summary>
            TenancyRepository
            </summary>
        </member>
        <member name="M:BC.DDD.MultiTenancy.ITenancyRepository.Single(System.String)">
            <summary>
            通过Id查找租户信息
            </summary>
            <param name="Id">Id</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.MultiTenancy.ITenancyRepository.SingleByName(System.String)">
            <summary>
            通过名称查找租户信息
            </summary>
            <param name="Name">名称</param>
            <returns></returns>
        </member>
        <member name="T:BC.DDD.MultiTenancy.Tenant">
            <summary>
            租户基础信息
            </summary>
        </member>
        <member name="P:BC.DDD.MultiTenancy.Tenant.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BC.DDD.MultiTenancy.Tenant.IsDelete">
            <summary>
            软删除
            </summary>
        </member>
        <member name="P:BC.DDD.Event.BaseDomainEvent`1.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:BC.DDD.Event.BaseDomainEvent`1.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BC.DDD.Event.BaseDomainEvent`1.EventTime">
            <summary>
            事件发生事件
            </summary>
        </member>
        <member name="T:BC.DDD.Event.DomainEventConst">
            <summary>
            领域对象事件的相关常量
            </summary>
        </member>
        <member name="F:BC.DDD.Event.DomainEventConst.DomainStates_Unchanged">
            <summary>
            领域对象状态：没有变化
            </summary>
        </member>
        <member name="F:BC.DDD.Event.DomainEventConst.DomainStates_Added">
            <summary>
            领域对象状态：已创建
            </summary>
        </member>
        <member name="F:BC.DDD.Event.DomainEventConst.DomainStates_Deleted">
            <summary>
            领域对象状态：已删除
            </summary>
        </member>
        <member name="F:BC.DDD.Event.DomainEventConst.DomainStates_Modified">
            <summary>
            领域对象状态：已修改
            </summary>
        </member>
        <member name="T:BC.DDD.Event.IDomainEvent`1">
            <summary>
            领域对象事件
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:BC.DDD.Event.IDomainEvent`1.State">
            <summary>
            领域对象的状态
            </summary>
        </member>
        <member name="P:BC.DDD.Event.IDomainEvent`1.Id">
            <summary>
            对象Id
            </summary>
        </member>
        <member name="P:BC.DDD.Event.IDomainEvent`1.EventTime">
            <summary>
            事件发生时间
            </summary>
        </member>
        <member name="T:BC.DDD.IoC.IDependencyResolver">
            <summary>
            依赖注入接口
            </summary>
        </member>
        <member name="P:BC.DDD.IoC.IDependencyResolver.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:BC.DDD.IoC.IDependencyResolver.Container">
            <summary>
            依赖注入控制器
            </summary>
        </member>
        <member name="M:BC.DDD.IoC.IDependencyResolver.Resolve``1(System.String)">
            <summary>
            取得依赖项
            </summary>
            <param name="Name">名称</param>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:BC.DDD.IoC.IDependencyResolver.ResolveAll``1">
            <summary>
            返回所有依赖项
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IoC.IDependencyResolver.Register``2(System.String)">
            <summary>
            注册依赖关系
            </summary>
            <param name="Name">注册为</param>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TClass">实现类类型</typeparam>
        </member>
        <member name="M:BC.DDD.IoC.IDependencyResolver.Inject``1(``0,System.String)">
            <summary>
            对现存对象进行注入
            </summary>
            <typeparam name="TType">现存对象类型</typeparam>
            <param name="ExistingObject">现存对象</param>
            <param name="Name">名称</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.IoC.IoCManage.Current">
            <summary>
            IoC实例
            </summary>
        </member>
        <member name="M:BC.DDD.IoC.IoCManage.Factory">
            <summary>
            依赖注入工厂
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IoC.IoCManage.GetCustom(System.String)">
            <summary>
            自定义容器
            </summary>
            <returns></returns>
        </member>
        <member name="F:BC.DDD.IoC.IoCManage.Container">
            <summary>
            容器
            </summary>
        </member>
        <member name="F:BC.DDD.IoC.IoCManage.Custom">
            <summary>
            自定义容器
            </summary>
        </member>
        <member name="M:BC.DDD.IoC.IoCManage.Resolve``1(System.String)">
            <summary>
            建立对象
            </summary>
            <param name="Name">名称</param>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:BC.DDD.IoC.UnityController.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="IsAutoConfig">是否自动加载配置信息</param>
            <param name="ContainerName">默认读取单元</param>
        </member>
        <member name="P:BC.DDD.IoC.UnityController.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="M:BC.DDD.IoC.UnityController.#ctor(Microsoft.Practices.Unity.Configuration.UnityConfigurationSection)">
            <summary>
            使用配置文件构造依赖管理器
            </summary>
            <param name="IoCConfig">配置文件</param>
        </member>
        <member name="M:BC.DDD.IoC.UnityController.#ctor(Microsoft.Practices.Unity.IUnityContainer)">
            <summary>
            使用现有依赖管理器
            </summary>
            <param name="Container">依赖注入框架具体实现</param>
        </member>
        <member name="P:BC.DDD.IoC.UnityController.CustomConfig">
            <summary>
            获取自定义配置文件
            </summary>
        </member>
        <member name="P:BC.DDD.IoC.UnityController.Container">
            <summary>
            依赖注入控制器
            </summary>
        </member>
        <member name="M:BC.DDD.IoC.UnityController.Resolve``1(System.String)">
            <summary>
            取得依赖项
            </summary>
            <param name="Name">名称</param>
            <typeparam name="TType"></typeparam>
        </member>
        <member name="M:BC.DDD.IoC.UnityController.ResolveAll``1">
            <summary>
            返回所有依赖项
            </summary>
            <typeparam name="TType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IoC.UnityController.Register``2(System.String)">
            <summary>
            注册依赖关系
            </summary>
            <param name="Name">注册为</param>
            <typeparam name="TInterface">接口类型</typeparam>
            <typeparam name="TClass">实现类类型</typeparam>
        </member>
        <member name="M:BC.DDD.IoC.UnityController.Inject``1(``0,System.String)">
            <summary>
            对现存对象进行注入
            </summary>
            <typeparam name="TType">现存对象类型</typeparam>
            <param name="ExistingObject">现存对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.BaseDomainService.#ctor(BC.DDD.IUnitOfWork)">
            <summary>
            构造函数
            </summary>
            <param name="UnitOfWork"></param>
        </member>
        <member name="F:BC.DDD.BaseDomainService.UnitOfWork">
            <summary>
            状态器
            </summary>
        </member>
        <member name="M:BC.DDD.BaseDomainService.SaveChanage">
            <summary>
            保存更改
            </summary>
        </member>
        <member name="M:BC.DDD.IDomainService.SaveChanage">
            <summary>
            保存更改
            </summary>
        </member>
        <member name="M:BC.DDD.IRepository`2.Add(`0)">
            <summary>
            加入一条
            </summary>
            <param name="EntityInfo">实体信息</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.BulkInsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            批量插入数据
            此方法无法应用上下文
            </summary>
            <param name="Entitys">要插入数据的对象</param>
        </member>
        <member name="M:BC.DDD.IRepository`2.Single(`1)">
            <summary>
            取一条
            </summary>
            <param name="Id">id</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.SingleAsNoTracking(`1)">
            <summary>
            按Id取一条信息
            </summary>
            <param name="Id">信息Id</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据条件取一条数据
            </summary>
            <param name="Where"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.SingleAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按条件查询一条信息
            </summary>
            <param name="Where"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.Remove(`1)">
            <summary>
            移除一条
            </summary>
            <param name="Id">Id</param>
        </member>
        <member name="M:BC.DDD.IRepository`2.Remove(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            删除指定条件的信息
            </summary>
            <param name="Where"></param>
        </member>
        <member name="M:BC.DDD.IRepository`2.Remove(`1[])">
            <summary>
            移除列表
            </summary>
            <param name="Ids"></param>
        </member>
        <member name="M:BC.DDD.IRepository`2.Remove(`0)">
            <summary>
            删除一条信息
            </summary>
            <param name="RemoveInfo"></param>
        </member>
        <member name="M:BC.DDD.IRepository`2.Edit(`0)">
            <summary>
            编辑数据
            </summary>
            <param name="EditInfo">要编辑的信息</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.All">
            <summary>
            返回全部信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.AllAsNoTracking">
            <summary>
            返回全部信息（无跟踪功能）
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按条件返回IQueryable
            </summary>
            <param name="Where"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.FindAsNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            按条件查询并返回无跟踪功能的对象
            </summary>
            <param name="Where">查询条件</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.Specification(BC.DDD.Specification.ISpecification{`0})">
            <summary>
            按规约返回IQueryable
            </summary>
            <param name="Specification">规约</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.IRepository`2.IsExist(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            是否存在（按条件查询）
            </summary>
            <param name="Where"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Json.JsonHelper.ToJSON(System.Object)">
            <summary>
            将对象转换为Json字符串
            </summary>
            <param name="ObjectData">对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Json.JsonHelper.FromJson``1(System.String)">
            <summary>
            从Json反序列化
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="Json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Message.DefaultSMSSender.Send(System.String,System.String)">
            <summary>
            给一个人发送短信
            </summary>
            <param name="Phone">手机号</param>
            <param name="Message">信息</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Message.DefaultSMSSender.Send(System.String[],System.String)">
            <summary>
            给多个人发送短信
            </summary>
            <param name="Phones">手机号列表</param>
            <param name="Message">信息</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Message.DefaultSMSSender.SendVerificationCode(System.String,System.String,System.String)">
            <summary>
            发送验证码
            </summary>
            <param name="Phone">手机号</param>
            <param name="Code">验证码</param>
            <param name="CodeType">验证码类型</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Message.ISMSSender.Send(System.String,System.String)">
            <summary>
            给一个人发送短信
            </summary>
            <param name="Phone">手机号</param>
            <param name="Message">信息</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Message.ISMSSender.Send(System.String[],System.String)">
            <summary>
            给多个人发送短信
            </summary>
            <param name="Phones">手机号列表</param>
            <param name="Message">信息</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Message.ISMSSender.SendVerificationCode(System.String,System.String,System.String)">
            <summary>
            发送验证码
            </summary>
            <param name="Phone">手机号</param>
            <param name="Code">验证码</param>
            <param name="CodeType">验证码类型</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.ObjectMapper.IObjectMapper.Map``2(``0)">
            <summary>
            两对象之间映射
            </summary>
            <typeparam name="TForm">来源类型</typeparam>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="Source">来源对象实例</param>
            <returns>映射好的目标对象实例</returns>
        </member>
        <member name="M:BC.DDD.ObjectMapper.IObjectMapper.Map``2(``0,``1)">
            <summary>
            将来源对象的值映射到目标对象
            </summary>
            <typeparam name="TFrom">来源对象数据类型</typeparam>
            <typeparam name="TTo">目标对象数据类型</typeparam>
            <param name="Source">来源对象实例</param>
            <param name="Target">目标对象实例</param>
            <returns>映射好的目标对象实例</returns>
        </member>
        <member name="M:BC.DDD.ObjectMapper.IObjectMapper.Map``1(System.Object)">
            <summary>
            将动态类型转换为静态类型
            </summary>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="Source">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.ObjectMapper.ObjectMapperExtension.Instance">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="M:BC.DDD.ObjectMapper.ObjectMapperExtension.Map``2(``0)">
            <summary>
            两对象之间映射
            </summary>
            <typeparam name="TForm">来源类型</typeparam>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="Source">来源对象实例</param>
            <returns>映射好的目标对象实例</returns>
        </member>
        <member name="M:BC.DDD.ObjectMapper.ObjectMapperExtension.Map``2(``0,``1)">
            <summary>
            将来源对象的值映射到目标对象
            </summary>
            <typeparam name="TFrom">来源对象数据类型</typeparam>
            <typeparam name="TTo">目标对象数据类型</typeparam>
            <param name="Source">来源对象实例</param>
            <param name="Target">目标对象实例</param>
            <returns>映射好的目标对象实例</returns>
        </member>
        <member name="M:BC.DDD.ObjectMapper.ObjectMapperExtension.Map``1(System.Object)">
            <summary>
            将动态类型转换为静态类型
            </summary>
            <typeparam name="TTo">目标类型</typeparam>
            <param name="Source">要转换的对象</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Schedule.IRecurringJob.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:BC.DDD.Schedule.IRecurringJob.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:BC.DDD.Schedule.IRecurringJob.Execute">
            <summary>
            执行操作
            </summary>
        </member>
        <member name="M:BC.DDD.Schedule.RecurringJobConfig.#ctor(System.String)">
            <summary>
            使用配置文件填充对象
            </summary>
            <param name="Config"></param>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobConfig.Items">
            <summary>
            周期任务设置
            </summary>
        </member>
        <member name="M:BC.DDD.Schedule.RecurringJobConfig.ToConfig">
            <summary>
            转换为配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Schedule.RecurringJobConfig.FromConfig(System.String)">
            <summary>
            将配置文件转换为对象
            </summary>
            <param name="Config"></param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobItem.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobItem.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobItem.JobTypeName">
            <summary>
            任务对象类型名称
            </summary>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobItem.JobType">
            <summary>
            任务对象类型
            </summary>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobItem.ExecuteMethod">
            <summary>
            执行任务的方法
            </summary>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobItem.Queue">
            <summary>
            队列
            </summary>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobItem.Cron">
            <summary>
            Cron表达式
            </summary>
        </member>
        <member name="P:BC.DDD.Schedule.RecurringJobItem.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="M:BC.DDD.Schedule.RecurringJobItem.ToConfig">
            <summary>
            将对象转换为配置文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Schedule.RecurringJobItem.FromConfig(System.String)">
            <summary>
            将配置文件转换为对象
            </summary>
            <param name="Config"></param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.ServiceBus.NullServiceBus.Publish(System.Object,System.Threading.CancellationToken)">
            <summary>
            发布信息
            </summary>
            <typeparam name="IMessage">信息类型</typeparam>
            <param name="Message">信息</param>
            <param name="cancellationToken">取消类型</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.ServiceBus.NullServiceBus.Publish``1(``0,System.Threading.CancellationToken)">
            <summary>
            发布信息
            </summary>
            <param name="Message">信息</param>
            <param name="cancellationToken">取消类型</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.ServiceBus.EventBus.Instance">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="M:BC.DDD.ServiceBus.EventBus.Publish(System.Object,System.Threading.CancellationToken)">
            <summary>
            发布信息
            </summary>
            <typeparam name="IMessage">信息类型</typeparam>
            <param name="Message">信息</param>
            <param name="cancellationToken">取消设置</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.ServiceBus.EventBus.Publish``1(``0,System.Threading.CancellationToken)">
            <summary>
            发布信息
            </summary>
            <param name="Message">信息</param>
            <param name="cancellationToken">取消设置</param>
            <returns></returns>
        </member>
        <member name="P:BC.DDD.ServiceBus.IMessage.MessageId">
            <summary>
            信息Id
            </summary>
        </member>
        <member name="M:BC.DDD.ServiceBus.IServiceBus.Publish``1(``0,System.Threading.CancellationToken)">
            <summary>
            发布信息
            </summary>
            <typeparam name="IMessage">信息类型</typeparam>
            <param name="Message">信息</param>
            <param name="cancellationToken">取消类型</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.ServiceBus.IServiceBus.Publish(System.Object,System.Threading.CancellationToken)">
            <summary>
            发布信息
            </summary>
            <param name="Message">信息</param>
            <param name="cancellationToken">取消类型</param>
            <returns></returns>
        </member>
        <member name="T:BC.DDD.Specification.AndSpecification`1">
            <summary>
            逻辑与
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BC.DDD.Specification.AndSpecification`1.Expressions">
            <summary>
            取得完整表达式
            </summary>
        </member>
        <member name="M:BC.DDD.Specification.BaseSpecification`1.IsSatisfiedBy(`0)">
            <summary>
            断言
            </summary>
            <param name="Predicate">断言对象</param>
            <returns>断言结果</returns>
        </member>
        <member name="M:BC.DDD.Specification.BaseSpecification`1.And(BC.DDD.Specification.ISpecification{`0})">
            <summary>
            逻辑与
            </summary>
            <param name="Other">与谁？</param>
            <returns>返回组装结果</returns>
        </member>
        <member name="M:BC.DDD.Specification.BaseSpecification`1.Or(BC.DDD.Specification.ISpecification{`0})">
            <summary>
            逻辑或
            </summary>
            <param name="Other">或谁</param>
            <returns>返回组装结果</returns>
        </member>
        <member name="M:BC.DDD.Specification.BaseSpecification`1.Not">
            <summary>
            逻辑非
            </summary>
            <returns>返回组装结果</returns>
        </member>
        <member name="P:BC.DDD.Specification.BaseSpecification`1.Expressions">
            <summary>
            取得完整表达式
            </summary>
        </member>
        <member name="T:BC.DDD.Specification.CombinationSpecification`1">
            <summary>
            组装表达式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BC.DDD.Specification.CombinationSpecification`1.#ctor(BC.DDD.Specification.ISpecification{`0},BC.DDD.Specification.ISpecification{`0})">
            <summary>
            组装表达式
            </summary>
            <param name="Left">左侧</param>
            <param name="Right">右侧</param>
        </member>
        <member name="P:BC.DDD.Specification.CombinationSpecification`1.Left">
            <summary>
            左侧表达式
            </summary>
        </member>
        <member name="P:BC.DDD.Specification.CombinationSpecification`1.Right">
            <summary>
            右侧表达式
            </summary>
        </member>
        <member name="P:BC.DDD.Specification.ICombinationSpecification`1.Left">
            <summary>
            左侧对象
            </summary>
        </member>
        <member name="P:BC.DDD.Specification.ICombinationSpecification`1.Right">
            <summary>
            右侧对象
            </summary>
        </member>
        <member name="P:BC.DDD.Specification.IQueryCriteria`1.Query">
            <summary>
            查询对象
            </summary>
        </member>
        <member name="M:BC.DDD.Specification.ISpecification`1.IsSatisfiedBy(`0)">
            <summary>
            断言
            </summary>
            <param name="Predicate">断言对象</param>
            <returns></returns>
        </member>
        <member name="M:BC.DDD.Specification.ISpecification`1.And(BC.DDD.Specification.ISpecification{`0})">
            <summary>
            逻辑与
            </summary>
            <param name="Other">与谁？</param>
            <returns>返回组装结果</returns>
        </member>
        <member name="M:BC.DDD.Specification.ISpecification`1.Or(BC.DDD.Specification.ISpecification{`0})">
            <summary>
            逻辑或
            </summary>
            <param name="Other">或谁</param>
            <returns>返回组装结果</returns>
        </member>
        <member name="M:BC.DDD.Specification.ISpecification`1.Not">
            <summary>
            逻辑非
            </summary>
            <returns>返回组装结果</returns>
        </member>
        <member name="P:BC.DDD.Specification.ISpecification`1.Expressions">
            <summary>
            取得完整表达式
            </summary>
        </member>
        <member name="T:BC.DDD.Specification.NotSpecification`1">
            <summary>
            非
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BC.DDD.Specification.NotSpecification`1.Expressions">
            <summary>
            取得完整的表达式
            </summary>
        </member>
        <member name="T:BC.DDD.Specification.OrSpecification`1">
            <summary>
            逻辑或
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:BC.DDD.Specification.OrSpecification`1.Expressions">
            <summary>
            取得完整表达式
            </summary>
        </member>
        <member name="T:BC.DDD.Specification.ParameterReplacer">
            <summary>
            格式化参数
            </summary>
        </member>
        <member name="T:BC.DDD.Specification.QueryCriteria`1">
            <summary>
            查询限定方位
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:BC.DDD.Specification.QueryCriteria`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            构造查询限定方位
            </summary>
            <param name="Query"></param>
        </member>
        <member name="P:BC.DDD.Specification.QueryCriteria`1.Query">
            <summary>
            查询对象
            </summary>
        </member>
        <member name="M:BC.DDD.Specification.Specification`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            构造规则
            </summary>
            <param name="Expression"></param>
        </member>
        <member name="F:BC.DDD.Specification.Specification`1._Expressions">
            <summary>
            内部表达式
            </summary>
        </member>
        <member name="P:BC.DDD.Specification.Specification`1.Expressions">
            <summary>
            取得完整表达式
            </summary>
        </member>
        <member name="M:BC.DDD.Specification.SpecificationHelper.And``1(BC.DDD.Specification.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            And
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Original">规约对象一</param>
            <param name="Target">规约对象二</param>
            <returns>
            如果规约对象一为null则返回规约对象二
            如果规约对象二也为null，最终将返回null
            </returns>
        </member>
        <member name="M:BC.DDD.Specification.SpecificationHelper.Or``1(BC.DDD.Specification.ISpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Or
            </summary>
            <typeparam name="T"></typeparam>
            <param name="Original">规约对象一</param>
            <param name="Target">规约对象二</param>
            <returns>
            如果规约对象一为null则返回规约对象二
            如果规约对象二也为null，最终将返回null
            </returns>
        </member>
        <member name="M:BC.Core.AutoBaseConfig`1.FromConfig(System.String)">
            <summary>
            将配置文件转换为对象
            </summary>
            <param name="Config"></param>
            <returns></returns>
        </member>
        <member name="M:BC.Core.AutoBaseConfig`1.ToConfig">
            <summary>
            将对象转换为配置文件
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
