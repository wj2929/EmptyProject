<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)libs\T4\Reference.ttinclude"  #>
<#@ output extension=".txt" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Web\bin\EntityFramework.dll" #>
<#@ assembly name="$(SolutionDir)Libs\BC\BC.DDD.dll" #>
<#@ assembly name="$(SolutionDir)Libs\BC\BC.Core.dll" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Web\bin\EmptyProject.Store.dll" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Web\bin\EmptyProject.Domain.dll" #>
<#@ import namespace="EmptyProject.Store.Models" #>
<#@ import namespace="EmptyProject.Domain" #>
<#var list=System.Reflection.Assembly.LoadFrom(((typeof(EmptyProject.Domain.Test)).Assembly).CodeBase).GetTypes().Where(t => typeof(BC.DDD.Domain.IDomain).IsAssignableFrom(t)).Select(t=>new KeyValuePair<string,string>(t.Name,t.GetInterface("IEntity`1").GenericTypeArguments[0].Name)).ToList().ToList();#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.Entity;
using BC.Core;
using BC.DDD;
using BC.DDD.EntityFramework;
using System.Data.Entity.Infrastructure;
using EmptyProject.Domain;
namespace EmptyProject.Store.Models
{
    public class EmptyProjectDBContext : BCDBContext
    {
        public EmptyProjectDBContext()
            : this("EmptyProjectDBContext")
        {

        }

<#
foreach (var item in list)
    {   
		string idType=item.Value=="String"?"string":item.Value;
		string PluralizationString = System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(new System.Globalization.CultureInfo("en")).Pluralize(item.Key);
#>
        /// <summary>
        /// <#=item.Key#>
        /// </summary>
        public IDbSet<<#=item.Key#>> <#=PluralizationString#> { get; set; }

<#}#>
        public EmptyProjectDBContext(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
            this.Configuration.AutoDetectChangesEnabled = true;
            Database.SetInitializer<EmptyProjectDBContext>(new CustomCreateDatabaseIfNotExists<EmptyProjectDBContext>());
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Configurations.AddFromAssembly(typeof(EmptyProjectDBContext).Assembly);
        }
    }
}
