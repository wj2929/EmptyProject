<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".config" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Service\bin\EntityFramework.dll" #>
<#@ assembly name="$(SolutionDir)Libs\BC\BC.DDD.dll" #>
<#@ assembly name="$(SolutionDir)Libs\BC\BC.Core.dll" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Service\bin\EmptyProject.Store.dll" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Service\bin\EmptyProject.Domain.dll" #>
<#@ import namespace="EmptyProject.Store.Models" #>
<#@ import namespace="EmptyProject.Domain" #>
<#var list=System.Reflection.Assembly.LoadFrom(((typeof(EmptyProject.Domain.Test)).Assembly).CodeBase).GetTypes().Where(t => typeof(BC.DDD.Domain.IDomain).IsAssignableFrom(t)).Select(t=>new KeyValuePair<string,string>(t.Name,t.GetInterface("IEntity`1").GenericTypeArguments[0].Name)).ToList().ToList();#>
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="unity" type="Microsoft.Practices.Unity.Configuration.UnityConfigurationSection, Microsoft.Practices.Unity.Configuration"/>
  </configSections>

  <unity xmlns="http://schemas.microsoft.com/practices/2010/unity">

    <alias alias="IUnitOfWork" type="BC.DDD.IUnitOfWork,BC.DDD"/>
    <alias alias="IDbContextFactory" type="BC.DDD.EntityFramework.IDbContextFactory,BC.DDD.EntityFramework"/>

    <!--日志-->
    <alias alias="ExceptionInterceptor" type="BC.DDD.Logging.ExceptionInterceptor,BC.DDD"/>
    <alias alias="ILogWrite" type="BC.DDD.Logging.ILogWrite,BC.DDD"/>
    <alias alias="IConfigAccessHelper`1" type="BC.Core.IConfigAccessHelper`1,BC.Core"/>
    <alias alias="LocalConfigurationAccessHelper`1" type="BC.Core.LocalConfigurationAccessHelper`1,BC.Core"/>

    <sectionExtension type="Microsoft.Practices.Unity.InterceptionExtension.Configuration.InterceptionConfigurationExtension,Microsoft.Practices.Unity.Interception.Configuration" />

    <container name="Default">
      <extension type="Interception"/>

      <register type="BC.Core.ITextTransferEngine,BC.Core" mapTo="BC.Core.TextTransferEngine,BC.Core">
        <lifetime type="singleton" />
      </register>

      <!--IIOAccess-->
      <register type="BC.Core.IIOAccess,BC.Core" mapTo="BC.Core.DefaultIOAccess,BC.Core">
        <lifetime type="singleton" />
      </register>

      <!--IServiceBus-->
      <!--<register type="BC.DDD.ServiceBus.IServiceBus,BC.DDD" mapTo="BC.ServiceBus.MassTransit,BC.ServiceBus.MassTransit">
        <lifetime type="singleton" />
      </register>-->

      <!--IObjectMapper-->
      <register type="BC.DDD.ObjectMapper.IObjectMapper,BC.DDD" mapTo="BC.AutoMapper.AutoMapperObjectMapper,BC.AutoMapper">
        <lifetime type="singleton" />
      </register>

      <register type="IInterceptionBehavior" mapTo="ExceptionInterceptor" name="ExceptionLog">
        <lifetime type="singleton"/>
      </register>

      <register type="IDbContextFactory" mapTo="EmptyProject.Store.Models.DatabaseFactory,EmptyProject.Store">
        <lifetime type="Microsoft.Practices.Unity.PerRequestLifetimeManager,Microsoft.Practices.Unity.Mvc" />
      </register>

      <register type="IUnitOfWork" mapTo="BC.DDD.EntityFramework.UnitOfWork,BC.DDD.EntityFramework">
        <lifetime type="Microsoft.Practices.Unity.PerRequestLifetimeManager,Microsoft.Practices.Unity.Mvc" />
      </register>

			<!--Store 开始-->
<#
foreach (var item in list)
    {   
		string idType=item.Value=="String"?"string":item.Value;
#>
			<register type="EmptyProject.Store.Interface.I<#=item.Key#>Store,EmptyProject.Store.Interface" mapTo="EmptyProject.Store.<#=item.Key#>Store,EmptyProject.Store"/>
<#}#>
			<!--Store 结束-->

      <!--Service 开始-->
      <!--<register type="EmptyProject.DomainService.Interface.IEmptyProjectPlanDomainService,EmptyProject.DomainService.Interface" mapTo="EmptyProject.DomainService.TestDomainService,EmptyProject.DomainService"/>-->
<#
foreach (var item in list)
    {   
#>
			<register type="EmptyProject.DomainService.Interface.I<#=item.Key#>DomainService,EmptyProject.DomainService.Interface" mapTo="EmptyProject.DomainService.<#=item.Key#>DomainService,EmptyProject.DomainService"/>
<#}#>
      <!--Service 结束-->
    </container>
  </unity>
</configuration>