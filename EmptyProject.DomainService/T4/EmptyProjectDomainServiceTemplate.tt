<#@ template  language="C#"	debug="true" hostspecific="True"#>
<#@ output extension=".cs" #>
<#@ include file="$(SolutionDir)lib\T4\Reference.ttinclude"  #>
<#@include file="$(SolutionDir)lib\T4\MultipleOutputHelper.ttinclude"#>
<#@ assembly name="$(SolutionDir)EmptyProject.Models\bin\Debug\EmptyProject.Models.dll" #>
<#@ import namespace="EmptyProject.Models" #>
 <# 
	var manager = Manager.Create(Host, GenerationEnvironment);  
	EmptyProject.Models.EmptyProjectDataClassesDataContext db = new EmptyProject.Models.EmptyProjectDataClassesDataContext();
	var tables = from t in db.Mapping.GetTables()
			orderby t.TableName
			select t;
	foreach (var table in tables)
	{
       var className = table.TableName.Replace("dbo.","").Replace("[","").Replace("]","");
		// 定义输出文件
		string outputFileName = className+"Service.cs";
		if(File.Exists(Path.Combine(Directory.GetParent(Path.GetDirectoryName(Host.TemplateFile)).FullName,outputFileName)))continue;
		manager.StartNewFile(outputFileName);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using EmptyProject.DomainService.Interface;
using EmptyProject.Repository.Interface;
using EmptyProject.Domain;
using BaseCommon.Specification;
using BaseCommon.Core.Validation;
using BaseCommon.Core.Page;
using BaseCommon.DDD;
using BaseCommon.Core.Collection;
using System.Linq.Expressions;

namespace EmptyProject.DomainService
{
    internal class <#= className #>Service : BaseDomainService,I<#= className #>Service
    {
        public <#= className #>Service(I<#= className #>Repository <#= className #>Repository,
            IUnitOfWork UnitOfWork)
            : base(UnitOfWork)
        {
            this.<#= className #>Repository = <#= className #>Repository;
        }
        private readonly I<#= className #>Repository <#= className #>Repository;

        #region AutoCode
		/// <summary>
		/// 添加一条信息
		/// </summary>		
		public <#= className #>Info Add<#= className #>(<#= className #>Info info)
		{
            info = this.<#= className #>Repository.Add(info);
            this.SaveChange();
            return info;
		}

		/// <summary>
		/// 添加多条信息
		/// </summary>		
		public IList<<#= className #>Info> Add<#= className #>s(IList<<#= className #>Info> infos)
		{
            infos = this.<#= className #>Repository.Add(infos).ToList();
            this.SaveChange();
            return infos;
		}

		/// <summary>
		/// 编辑一条信息
		/// </summary>		
		public void Edit<#= className #>(<#= className #>Info info)
		{
			this.<#= className #>Repository.Edit(info);
			this.SaveChange();
		}

		/// <summary>
		/// 读取一条数据，如数据不存在，返回null
		/// </summary>		
		public <#= className #>Info Single(Guid Id)
		{
            return this.<#= className #>Repository.Single(Id);
		}

		/// <summary>
		/// 删除一条信息
		/// </summary>		
		public void Remove(Guid Id)
		{
            this.<#= className #>Repository.Remove(Id);
            this.SaveChange();
		}

		/// <summary>
		/// 删除多条信息
		/// </summary>		
		public void Removes(Guid[] Ids)
		{
            if (Ids.Length > 0)
            {
                this.<#= className #>Repository.Remove(Ids);
                this.SaveChange();
            }
		}

		/// <summary>
		/// 删除多条信息
		/// </summary>		
		public void Removes(<#= className #>SearchCondition <#= className #>SearchCondition)
		{
            this.<#= className #>Repository.Remove(GetExpression(<#= className #>SearchCondition));
            this.SaveChange();
		}


		/// <summary>
		/// 获得所有信息
		/// </summary>		
		public IList<<#= className #>Info> All()
		{
            return this.<#= className #>Repository.All().ToList();
		}

        /// <summary>
        /// 获取分页数据
        /// </summary>
        /// <param name="<#= className #>SearchCondition"></param>
        /// <param name="PageSize"></param>
        /// <param name="PageNum"></param>
        /// <returns></returns>
        public ReturnPaging<<#= className #>Info> Get<#= className #>Paging(<#= className #>SearchCondition <#= className #>SearchCondition, int PageSize = 20, int PageNum = 1)
        {
            var q = GetQueryable(<#= className #>SearchCondition);

            ReturnPaging<<#= className #>Info> returnPaging = new ReturnPaging<<#= className #>Info>();
            Module_Page _Pages = new Module_Page();
            _Pages.PageNum = PageNum;
            _Pages.AllCount = q.Count();
            _Pages.PageSize = PageSize;
            _Pages.Compute();
            returnPaging.Module_Page = _Pages;
            returnPaging.PageListInfos = this.<#= className #>Repository.ModelMapToEntity(q.OrderByDescending(c => c.CreateDate).Skip(_Pages.First).Take(_Pages.Max).ToList()).ToList();
            return returnPaging;
        }

        /// <summary>
        /// 统计
        /// </summary>
        /// <param name="<#= className #>SearchCondition"></param>
        /// <returns></returns>
        public int Count(<#= className #>SearchCondition <#= className #>SearchCondition)
        {
            return GetQueryable(<#= className #>SearchCondition).Count();
        }

        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="<#= className #>SearchCondition"></param>
        /// <param name="PageSize"></param>
        /// <param name="PageNum"></param>
        /// <returns></returns>
        public IList<<#= className #>Info> GetList(<#= className #>SearchCondition <#= className #>SearchCondition, int PageSize = int.MaxValue, int PageNum = 1)
        {
            PageNum = PageNum == 0 ? 1 : PageNum;
            return this.<#= className #>Repository.ModelMapToEntity(GetQueryable(<#= className #>SearchCondition).OrderByDescending(c => c.CreateDate).Skip((PageNum - 1) * PageSize).Take(PageSize).ToList()).ToList();
        }
        /// <summary>
        /// 检查Id是否存在
        /// </summary>
        /// <param name="Id"></param>
        /// <returns></returns>
        public bool IsExist(Guid Id)
        {
            return this.<#= className #>Repository.IsExist(Id);
        }

        IQueryable<Models.<#= className #>> GetQueryable(<#= className #>SearchCondition <#= className #>SearchCondition)
        {
            return this.<#= className #>Repository.SpecificationWithQueryable(GetSpecification(<#= className #>SearchCondition));
        }

        Expression<Func<Models.<#= className #>, bool>> GetExpression(<#= className #>SearchCondition <#= className #>SearchCondition)
        {
            return GetSpecification(<#= className #>SearchCondition).Expressions;
        }

		#endregion

		ISpecification<Models.<#= className #>> GetSpecification(<#= className #>SearchCondition <#= className #>SearchCondition)
        {
            ISpecification<Models.<#= className #>> Specification = new Specification<Models.<#= className #>>(t => 1 == 1);

            if (<#= className #>SearchCondition.Ids != null && <#= className #>SearchCondition.Ids.Length > 0 && <#= className #>SearchCondition.Ids[0].IsNotEmpty())
                Specification = Specification.And(t => <#= className #>SearchCondition.Ids.Contains(t.Id));

			return Specification;
            //var q = this.<#= className #>Repository.SpecificationWithQueryable(Specification);

            //return q;
        }


	}
}
<#
			   // 结束输出文件
			   manager.EndBlock();
	}
	   // 执行编译
	   manager.Process(true); 
	#>
