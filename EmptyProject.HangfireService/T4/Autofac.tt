<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".json" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Service\bin\EntityFramework.dll" #>
<#@ assembly name="$(SolutionDir)Libs\BC\BC.DDD.dll" #>
<#@ assembly name="$(SolutionDir)Libs\BC\BC.Core.dll" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Service\bin\EmptyProject.Store.dll" #>
<#@ assembly name="$(SolutionDir)EmptyProject.Service\bin\EmptyProject.Domain.dll" #>
<#@ import namespace="EmptyProject.Store.Models" #>
<#@ import namespace="EmptyProject.Domain" #>
<#var list=System.Reflection.Assembly.LoadFrom(((typeof(EmptyProject.Domain.Test)).Assembly).CodeBase).GetTypes().Where(t => typeof(BC.DDD.Domain.IDomain).IsAssignableFrom(t)).Select(t=>new KeyValuePair<string,string>(t.Name,t.GetInterface("IEntity`1").GenericTypeArguments[0].Name)).ToList().ToList();#>
{
  "components": [
    {
      "type": "BC.DDD.EntityFramework.UnitOfWork,BC.DDD.EntityFramework",
      "services": [ { "type": "BC.DDD.IUnitOfWork,BC.DDD" } ],
      "instanceScope": "instanceperlifetimescope"
    },
    {
      "type": "EmptyProject.Store.Models.DatabaseFactory,EmptyProject.Store",
      "services": [ { "type": "BC.DDD.EntityFramework.IDbContextFactory,BC.DDD.EntityFramework" } ],
      "instanceScope": "instanceperlifetimescope"
    },
    {
      "type": "BC.AutoMapper.AutoMapperObjectMapper,BC.AutoMapper",
      "services": [ { "type": "BC.DDD.ObjectMapper.IObjectMapper,BC.DDD" } ],
      "instanceScope": "instanceperlifetimescope"
    },
	{ "type": "EmptyProject.HangfireService.Schedule.TestEndProcessingRecurringJob, EmptyProject.HangfireService.Schedule" },
	{ "type": "EmptyProject.HangfireService.Schedule.TestStartProcessingRecurringJob, EmptyProject.HangfireService.Schedule" },
	//Store 开始
<#
foreach (var item in list)
    {   
		string idType=item.Value=="String"?"string":item.Value;
#>
    { "type": "EmptyProject.Store.<#=item.Key#>Store,EmptyProject.Store", "services": [ { "type": "EmptyProject.Store.Interface.I<#=item.Key#>Store,EmptyProject.Store.Interface" } ] },
<#}#>
	//Store 结束
	//Service 开始
<#
foreach (var item in list)
    {   
		string idType=item.Value=="String"?"string":item.Value;
#>
    { "type": "EmptyProject.DomainService.<#=item.Key#>DomainService,EmptyProject.DomainService", "services": [ { "type": "EmptyProject.DomainService.Interface.I<#=item.Key#>DomainService,EmptyProject.DomainService.Interface" } ] },
<#}#>
	//Service 结束
	]
}
