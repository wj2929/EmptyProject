<#@ template  language="C#"    debug="true" hostspecific="True"#>
<#@ include file="$(SolutionDir)lib\T4\Reference.ttinclude"  #>
<#@include file="$(SolutionDir)lib\T4\MultipleOutputHelper.ttinclude"#>
// 导入相关的DLL
<#@ import namespace="System.IO"#>
<#@ import namespace="System"#>
<#@ import namespace="System.Configuration"#>  
<#@ Assembly Name="$(SolutionDir)EmptyProject.Models\bin\debug\EmptyProject.Models.dll" #>
 <# 
	var manager = Manager.Create(Host, GenerationEnvironment);  
	EmptyProject.Models.EmptyProjectDataClassesDataContext db = new EmptyProject.Models.EmptyProjectDataClassesDataContext();
	var tables = from t in db.Mapping.GetTables()
			orderby t.TableName
			select t;
	foreach (var table in tables)
    {
       var className = table.TableName.Replace("dbo.","").Replace("[","").Replace("]","");
        // 定义输出文件
		string outputFileName = "I"+className+"Repository.cs";
		if(File.Exists(Path.Combine(Directory.GetParent(Path.GetDirectoryName(Host.TemplateFile)).FullName,outputFileName)))continue;
		manager.StartNewFile(outputFileName);
       #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using EmptyProject.Domain;
using BaseCommon.DDD;
namespace EmptyProject.Repository.Interface
{
		public interface I<#=className#>Repository : IRepository<<#=className#>Info,Models.<#=className#>,Guid>
		{
 
		}
}
<#
			   // 结束输出文件
			   manager.EndBlock();
    }
       // 执行编译
       manager.Process(true); 
    #>
